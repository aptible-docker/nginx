#!/bin/bash

# Prepare maintenance page
if [ -n "${MAINTENANCE_PAGE_URL}" ]; then
  curl -s "${MAINTENANCE_PAGE_URL}" > /usr/html/50x.html
fi

cd /html && erb acme-pending.html.erb > acme-pending.html

# Unless overridden, use a default configuration that enables PFS for most
# browsers and provides SSLv3 while mitigating POODLE by avoiding CBC-mode
# ciphers. Reference: http://serverfault.com/a/637849
SSL_CIPHERS="EECDH+ECDSA+AESGCM:EECDH+aRSA+AESGCM:EECDH+ECDSA+SHA384:EECDH+ECDSA+SHA256:EECDH+aRSA+SHA384:EECDH+aRSA+SHA256:EECDH+aRSA+RC4:EECDH:EDH+aRSA:RC4:!aNULL:!eNULL:!LOW:!3DES:!EXP:!PSK:!SRP:!DSS:!CAMELLIA:!SEED:!SSLv3+AES"
SSL_PROTOCOLS="SSLv3 TLSv1 TLSv1.1 TLSv1.2"
if [ -n "${DISABLE_WEAK_CIPHER_SUITES}" ]; then
  # Only TLS 1.0 and up, enable PFS for most clients but provide DES-CBC3-SHA
  # for clients like IE 8 on Win XP or Java 6 that don't support PFS. IE 6 on
  # Win XP can use DES-CBC3-SHA if TLS 1.0 is manually enabled on the client.
  SSL_CIPHERS="EECDH+ECDSA+AESGCM:EECDH+aRSA+AESGCM:EECDH+ECDSA+SHA384:EECDH+ECDSA+SHA256:EECDH+aRSA+SHA384:EECDH+aRSA+SHA256:EECDH:DES-CBC3-SHA:EDH+aRSA!aNULL:!eNULL:!LOW:!EXP:!PSK:!SRP:!DSS:!CAMELLIA:!SEED:!RC4:!MD5"
  SSL_PROTOCOLS="TLSv1 TLSv1.1 TLSv1.2"
fi
# Finally, allow either SSL_CIPHERS or SSL_PROTOCOLS to be overridden
# individually with *OVERRIDE environment variables.
[ -n "$SSL_CIPHERS_OVERRIDE" ] && SSL_CIPHERS="${SSL_CIPHERS_OVERRIDE//;}"
[ -n "$SSL_PROTOCOLS_OVERRIDE" ] && SSL_PROTOCOLS="${SSL_PROTOCOLS_OVERRIDE//;}"
export SSL_CIPHERS SSL_PROTOCOLS

if [[ -n "$KEEPALIVE_TIMEOUT" ]] && [[ ! "$KEEPALIVE_TIMEOUT" =~ ^[0-9]+$ ]]; then
  echo "KEEPALIVE_TIMEOUT=${KEEPALIVE_TIMEOUT} is not acceptable!" >&2
  unset KEEPALIVE_TIMEOUT
fi

if [[ -n "$PROXY_IDLE_TIMEOUT" ]] && [[ ! "$PROXY_IDLE_TIMEOUT" =~ ^[0-9]+$ ]]; then
  echo "PROXY_IDLE_TIMEOUT=${PROXY_IDLE_TIMEOUT} is not acceptable!" >&2
  unset PROXY_IDLE_TIMEOUT
fi

export SSL_CERTIFICATE_FILE="/etc/nginx/ssl/server.crt"
export SSL_KEY_FILE="/etc/nginx/ssl/server.key"

# Process ERB variables in Nginx configuration templates
cd /etc/nginx && erb nginx.conf.erb > nginx.conf
cd /etc/nginx/partial && erb health.conf.erb > health.conf
cd /etc/nginx/partial && erb server.conf.erb > server.conf
cd /etc/nginx/partial && erb location.conf.erb > location.conf
cd /etc/nginx/partial && erb ssl.conf.erb > ssl.conf
cd /etc/nginx/sites-enabled && erb server.conf.erb > server.conf

if [[ -n "$SSL_CERTIFICATE" ]]; then
  mkdir -p "$(dirname "$SSL_CERTIFICATE_FILE")"
  touch "$SSL_CERTIFICATE_FILE"
  chmod 644 "$SSL_CERTIFICATE_FILE"
  echo "$SSL_CERTIFICATE" > "$SSL_CERTIFICATE_FILE"
  unset SSL_CERTIFICATE
fi

if [[ -n "$SSL_KEY" ]]; then
  mkdir -p "$(dirname "$SSL_KEY_FILE")"
  touch "$SSL_KEY_FILE"
  chmod 600 "$SSL_KEY_FILE"
  echo "$SSL_KEY" > "$SSL_KEY_FILE"
  unset SSL_KEY
fi

if [[ ! -f "$SSL_CERTIFICATE_FILE" ]] || [[ ! -f "$SSL_KEY_FILE" ]]; then
  mkdir -p "$(dirname "$SSL_CERTIFICATE_FILE")" "$(dirname "$SSL_KEY_FILE")"
  openssl req -new -newkey rsa:1024 -x509 \
    -days 365000 -nodes -subj /CN=example.com \
    -keyout "$SSL_KEY_FILE" -out "$SSL_CERTIFICATE_FILE"
  chmod 600 "$SSL_KEY_FILE"
fi

exec /usr/sbin/nginx "$@"
